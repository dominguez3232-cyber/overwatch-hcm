// Certificate URL utilities
export const createCertificateShareUrl = (certificateId: string): string => {
  const baseUrl = window.location.origin;
  return `${baseUrl}/certificate?id=${certificateId}`;
};

export const extractCertificateIdFromUrl = (): string | null => {
  const params = new URLSearchParams(window.location.search);
  return params.get('id');
};

export const updateUrlWithCertificateId = (certificateId: string): void => {
  const url = new URL(window.location.href);
  url.pathname = '/certificate';
  url.searchParams.set('id', certificateId);
  window.history.pushState({}, '', url.toString());
};

export const generateCertificateMetadata = (certificate: any) => {
  return {
    title: `Certificate of Completion - ${certificate.moduleTitle}`,
    description: `${certificate.learnerName} has successfully completed ${certificate.moduleTitle} with measurable coaching impact.`,
    image: `/api/certificate/${certificate.certificateId}/image`, // Could be implemented for social sharing
    url: createCertificateShareUrl(certificate.certificateId)
  };
};

// Social sharing utilities
export const shareCertificateToLinkedIn = (certificate: any) => {
  const metadata = generateCertificateMetadata(certificate);
  const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(metadata.url)}`;
  window.open(linkedInUrl, '_blank', 'width=600,height=400');
};

export const shareCertificateToTwitter = (certificate: any) => {
  const metadata = generateCertificateMetadata(certificate);
  const tweetText = `ðŸŽ“ Just completed "${certificate.moduleTitle}" with @OverwatchHRIS! 
  
ðŸ“ˆ Clarity Index: ${certificate.metrics.clarityIndex}
ðŸ’ª Confidence Lift: ${certificate.metrics.confidenceLift} 
âš¡ Execution Speed: ${certificate.metrics.executionSpeed}

#StrategicHR #FounderLed #OVERWATCH3`;
  
  const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}&url=${encodeURIComponent(metadata.url)}`;
  window.open(twitterUrl, '_blank', 'width=600,height=400');
};

export const copyCertificateLinkToClipboard = async (certificateId: string): Promise<boolean> => {
  const url = createCertificateShareUrl(certificateId);
  
  try {
    await navigator.clipboard.writeText(url);
    return true;
  } catch (error) {
    console.error('Failed to copy certificate link:', error);
    return false;
  }
};

// QR Code utilities
export const generateQRCodeDataURL = (certificateId: string): string => {
  const url = createCertificateShareUrl(certificateId);
  // This would integrate with a QR code library to generate data URL
  return `data:image/svg+xml;base64,${btoa(url)}`;
};

// Embed code generators
export const generateEmbedCode = (
  certificateId: string, 
  options: {
    width?: string | number;
    height?: string | number;
    responsive?: boolean;
    title?: string;
  } = {}
): string => {
  const {
    width = options.responsive ? '100%' : '800',
    height = '600',
    title = 'OVERWATCHÂ³ Certificate'
  } = options;

  const url = createCertificateShareUrl(certificateId);
  
  const style = options.responsive 
    ? 'border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);'
    : 'border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';

  return `<iframe
  src="${url}"
  width="${width}"
  height="${height}"
  frameborder="0"
  allowfullscreen
  style="${style}"
  title="${title} - OVERWATCHÂ³ Certificate">
</iframe>`;
};

export const generateResponsiveEmbedCode = (certificateId: string, title?: string): string => {
  return generateEmbedCode(certificateId, {
    responsive: true,
    title
  });
};

export const generateFullscreenEmbedCode = (certificateId: string, title?: string): string => {
  return generateEmbedCode(certificateId, {
    width: '100%',
    height: '100vh',
    title
  });
};

// Email sharing utilities
export const generateEmailShareContent = (certificate: any) => {
  const url = createCertificateShareUrl(certificate.certificateId);
  
  return {
    subject: `ðŸŽ“ Certificate Achievement: ${certificate.moduleTitle}`,
    body: `I'm excited to share my certificate of completion for "${certificate.moduleTitle}"!

ðŸ“ˆ Impact Metrics:
â€¢ Clarity Index: ${certificate.metrics.clarityIndex}
â€¢ Confidence Lift: ${certificate.metrics.confidenceLift}
â€¢ Execution Speed: ${certificate.metrics.executionSpeed}

View my certificate: ${url}

Generated by OVERWATCHÂ³ - Strategic Intelligence Platform
#FounderLed #StrategicHR #OVERWATCH3`
  };
};

export const shareViaEmail = (certificate: any) => {
  const { subject, body } = generateEmailShareContent(certificate);
  const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  window.location.href = mailtoUrl;
};

// WhatsApp sharing
export const shareViaWhatsApp = (certificate: any) => {
  const url = createCertificateShareUrl(certificate.certificateId);
  const message = `ðŸŽ“ Just completed "${certificate.moduleTitle}" with OVERWATCHÂ³!

ðŸ“Š My Results:
âœ… Clarity Index: ${certificate.metrics.clarityIndex}
ðŸ’ª Confidence Lift: ${certificate.metrics.confidenceLift}
âš¡ Execution Speed: ${certificate.metrics.executionSpeed}

Check out my certificate: ${url}

#StrategicHR #FounderLed`;

  const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
  window.open(whatsappUrl, '_blank');
};