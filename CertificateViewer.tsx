import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { 
  ArrowLeft, 
  Download, 
  Share2, 
  Globe, 
  Play, 
  Copy, 
  Check,
  ExternalLink,
  Award,
  Calendar,
  User,
  BookOpen,
  Target,
  TrendingUp,
  Zap,
  QrCode
} from 'lucide-react';
import { Button } from './ui/button';
import { Card } from './ui/card';
import { Badge } from './ui/badge';
import { certificateService, type CertificateData } from '../utils/certificateService';
import { 
  createCertificateShareUrl, 
  copyCertificateLinkToClipboard,
  shareCertificateToLinkedIn,
  shareCertificateToTwitter
} from '../utils/certificateUtils';
import EmbedModal from './EmbedModal';
import QRCodeGenerator from './QRCodeGenerator';
import QRCode from 'react-qr-code';

interface CertificateViewerProps {
  certificateId: string;
  language: 'en' | 'es';
  onNavigate?: (view: string) => void;
  onLanguageChange?: (language: 'en' | 'es') => void;
}

const translations = {
  en: {
    loading: 'Loading certificate...',
    notFound: 'Certificate not found',
    certificateOfCompletion: 'Certificate of Completion',
    completedTheModule: 'has successfully completed the module:',
    impactMetrics: 'Impact Metrics',
    schemaTrace: 'Schema Trace',
    completedOn: 'Completed on',
    certificateId: 'Certificate ID',
    shareThisCertificate: 'Share this certificate',
    downloadPDF: 'Download PDF',
    replayModule: 'Replay Module',
    backToModules: 'Back to Modules',
    copyLink: 'Copy Link',
    linkCopied: 'Link Copied!',
    shareSuccess: 'Certificate link copied to clipboard',
    viewFullProfile: 'View Full Profile',
    language: 'Language',
    generatedBy: 'Generated by OVERWATCH³',
    poweredBy: 'Powered by Strategic Intelligence',
    clarityIndex: 'Clarity Index',
    confidenceLift: 'Confidence Lift', 
    executionSpeed: 'Execution Speed',
    verifyAuthenticity: 'Verify Authenticity',
    authenticated: 'Authenticated Certificate',
    shareAndEmbed: 'Share & Embed',
    qrCode: 'QR Code',
    showQR: 'Show QR Code',
    hideQR: 'Hide QR Code'
  },
  es: {
    loading: 'Cargando certificado...',
    notFound: 'Certificado no encontrado',
    certificateOfCompletion: 'Certificado de Finalización',
    completedTheModule: 'ha completado exitosamente el módulo:',
    impactMetrics: 'Métricas de Impacto',
    schemaTrace: 'Traza del Esquema',
    completedOn: 'Completado el',
    certificateId: 'ID del Certificado',
    shareThisCertificate: 'Compartir este certificado',
    downloadPDF: 'Descargar PDF',
    replayModule: 'Repetir Módulo',
    backToModules: 'Volver a Módulos',
    copyLink: 'Copiar Enlace',
    linkCopied: '¡Enlace Copiado!',
    shareSuccess: 'Enlace del certificado copiado al portapapeles',
    viewFullProfile: 'Ver Perfil Completo',
    language: 'Idioma',
    generatedBy: 'Generado por OVERWATCH³',
    poweredBy: 'Impulsado por Inteligencia Estratégica',
    clarityIndex: 'Índice de Claridad',
    confidenceLift: 'Aumento de Confianza',
    executionSpeed: 'Velocidad de Ejecución',
    verifyAuthenticity: 'Verificar Autenticidad',
    authenticated: 'Certificado Autenticado',
    shareAndEmbed: 'Compartir e Incrustar',
    qrCode: 'Código QR',
    showQR: 'Mostrar QR',
    hideQR: 'Ocultar QR'
  }
};

// Metric Component
const Metric: React.FC<{
  label: string;
  value: string;
  icon?: React.ReactNode;
  color?: string;
}> = ({ label, value, icon, color = 'blue' }) => {
  const iconColors = {
    blue: 'text-blue-500',
    green: 'text-green-500',
    purple: 'text-purple-500',
    orange: 'text-orange-500'
  };

  return (
    <motion.div 
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="flex items-center justify-between p-4 bg-secondary/50 rounded-lg border border-border"
    >
      <div className="flex items-center gap-3">
        {icon && (
          <div className={`w-8 h-8 rounded-lg bg-background flex items-center justify-center ${iconColors[color as keyof typeof iconColors]}`}>
            {icon}
          </div>
        )}
        <span className="font-medium text-foreground">{label}</span>
      </div>
      <span className={`font-bold text-lg ${iconColors[color as keyof typeof iconColors]}`}>
        {value}
      </span>
    </motion.div>
  );
};

// Language Toggle Component
const LanguageToggle: React.FC<{
  current: 'en' | 'es';
  onChange: (language: 'en' | 'es') => void;
}> = ({ current, onChange }) => {
  return (
    <Button
      variant="outline"
      size="sm"
      onClick={() => onChange(current === 'en' ? 'es' : 'en')}
      className="flex items-center gap-2"
    >
      <Globe className="w-4 h-4" />
      <span>{current.toUpperCase()}</span>
    </Button>
  );
};

// Enhanced Share Button Component with Social Media
const ShareButton: React.FC<{
  certificateId: string;
  certificate: CertificateData;
  language: 'en' | 'es';
}> = ({ certificateId, certificate, language }) => {
  const [copied, setCopied] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const t = translations[language];

  const handleCopyLink = async () => {
    const success = await copyCertificateLinkToClipboard(certificateId);
    if (success) {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      setShowDropdown(false);
    }
  };

  const handleLinkedInShare = () => {
    shareCertificateToLinkedIn(certificate);
    setShowDropdown(false);
  };

  const handleTwitterShare = () => {
    shareCertificateToTwitter(certificate);
    setShowDropdown(false);
  };

  return (
    <div className="relative">
      <Button
        onClick={() => setShowDropdown(!showDropdown)}
        className="flex items-center gap-2 bg-primary hover:bg-primary/90"
      >
        <Share2 className="w-4 h-4" />
        {t.shareThisCertificate}
      </Button>

      <AnimatePresence>
        {showDropdown && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full mt-2 right-0 bg-card border border-border rounded-lg shadow-lg p-2 min-w-48 z-10"
          >
            <button
              onClick={handleCopyLink}
              className="w-full flex items-center gap-3 px-3 py-2 hover:bg-secondary rounded-md transition-colors text-left"
            >
              {copied ? (
                <>
                  <Check className="w-4 h-4 text-green-500" />
                  <span className="text-green-500">{t.linkCopied}</span>
                </>
              ) : (
                <>
                  <Copy className="w-4 h-4" />
                  <span>{t.copyLink}</span>
                </>
              )}
            </button>
            
            <button
              onClick={handleLinkedInShare}
              className="w-full flex items-center gap-3 px-3 py-2 hover:bg-secondary rounded-md transition-colors text-left"
            >
              <div className="w-4 h-4 bg-blue-600 rounded-sm flex items-center justify-center">
                <span className="text-white text-xs font-bold">in</span>
              </div>
              <span>LinkedIn</span>
            </button>
            
            <button
              onClick={handleTwitterShare}
              className="w-full flex items-center gap-3 px-3 py-2 hover:bg-secondary rounded-md transition-colors text-left"
            >
              <div className="w-4 h-4 bg-sky-500 rounded-sm flex items-center justify-center">
                <span className="text-white text-xs font-bold">𝕏</span>
              </div>
              <span>Twitter / X</span>
            </button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Backdrop to close dropdown */}
      {showDropdown && (
        <div
          className="fixed inset-0 z-0"
          onClick={() => setShowDropdown(false)}
        />
      )}
    </div>
  );
};

// Download PDF Button Component
const DownloadPDFButton: React.FC<{
  certificateData: CertificateData;
  language: 'en' | 'es';
}> = ({ certificateData, language }) => {
  const t = translations[language];

  const handleDownload = () => {
    // For now, trigger print dialog - could integrate with PDF generation library
    window.print();
  };

  return (
    <Button
      variant="outline"
      onClick={handleDownload}
      className="flex items-center gap-2"
    >
      <Download className="w-4 h-4" />
      {t.downloadPDF}
    </Button>
  );
};

// Replay Module Button Component
const ReplayModuleButton: React.FC<{
  moduleId?: string;
  language: 'en' | 'es';
  onNavigate?: (view: string) => void;
}> = ({ moduleId, language, onNavigate }) => {
  const t = translations[language];

  const handleReplay = () => {
    if (onNavigate) {
      onNavigate('lesson-player');
    }
  };

  return (
    <Button
      variant="outline"
      onClick={handleReplay}
      className="flex items-center gap-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground"
    >
      <Play className="w-4 h-4" />
      {t.replayModule}
    </Button>
  );
};

// Main Certificate Viewer Component
export const CertificateViewer: React.FC<CertificateViewerProps> = ({
  certificateId,
  language,
  onNavigate,
  onLanguageChange
}) => {
  const [certificate, setCertificate] = useState<CertificateData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showQRShowcase, setShowQRShowcase] = useState(false);

  const t = translations[language];

  useEffect(() => {
    const fetchCertificate = async () => {
      if (!certificateId) {
        setError('No certificate ID provided');
        setLoading(false);
        return;
      }

      setLoading(true);
      setError(null);

      try {
        const result = await certificateService.getCertificate(certificateId);
        setCertificate(result.certificate);
      } catch (err) {
        console.error('Error fetching certificate:', err);
        setError(err instanceof Error ? err.message : 'Failed to load certificate');
        
        // Try to generate a demo certificate as fallback
        try {
          await certificateService.seedDemoData();
          const fallbackResult = await certificateService.generateCertificate(
            'demo-module-founder-clarity',
            'demo-learner-luis'
          );
          setCertificate(fallbackResult.certificate);
          setError(null);
        } catch (fallbackError) {
          console.error('Fallback certificate generation failed:', fallbackError);
        }
      } finally {
        setLoading(false);
      }
    };

    fetchCertificate();
  }, [certificateId]);

  // Update page metadata for social sharing
  useEffect(() => {
    if (certificate) {
      // Update page title
      document.title = `Certificate of Completion - ${certificate.moduleTitle} | OVERWATCH³`;
      
      // Update meta description
      const metaDescription = document.querySelector('meta[name="description"]');
      if (metaDescription) {
        metaDescription.setAttribute('content', 
          `${certificate.learnerName} has successfully completed ${certificate.moduleTitle} with measurable coaching impact. Clarity Index: ${certificate.metrics.clarityIndex}, Confidence Lift: ${certificate.metrics.confidenceLift}`
        );
      }

      // Update Open Graph tags for social sharing
      const updateOrCreateMetaTag = (property: string, content: string) => {
        let metaTag = document.querySelector(`meta[property="${property}"]`);
        if (!metaTag) {
          metaTag = document.createElement('meta');
          metaTag.setAttribute('property', property);
          document.head.appendChild(metaTag);
        }
        metaTag.setAttribute('content', content);
      };

      updateOrCreateMetaTag('og:title', `Certificate of Completion - ${certificate.moduleTitle}`);
      updateOrCreateMetaTag('og:description', 
        `${certificate.learnerName} has successfully completed ${certificate.moduleTitle} with measurable coaching impact.`
      );
      updateOrCreateMetaTag('og:type', 'article');
      updateOrCreateMetaTag('og:url', createCertificateShareUrl(certificate.certificateId));
      updateOrCreateMetaTag('og:site_name', 'OVERWATCH³');
      
      // Twitter Card tags
      const updateOrCreateTwitterTag = (name: string, content: string) => {
        let metaTag = document.querySelector(`meta[name="${name}"]`);
        if (!metaTag) {
          metaTag = document.createElement('meta');
          metaTag.setAttribute('name', name);
          document.head.appendChild(metaTag);
        }
        metaTag.setAttribute('content', content);
      };

      updateOrCreateTwitterTag('twitter:card', 'summary_large_image');
      updateOrCreateTwitterTag('twitter:title', `Certificate of Completion - ${certificate.moduleTitle}`);
      updateOrCreateTwitterTag('twitter:description', 
        `${certificate.learnerName} completed ${certificate.moduleTitle}. Impact metrics: ${certificate.metrics.clarityIndex} clarity, ${certificate.metrics.confidenceLift} confidence lift.`
      );
    }

    // Cleanup function to reset page title when component unmounts
    return () => {
      document.title = 'OVERWATCH³ - Advisory-Grade HRIS Command Center';
    };
  }, [certificate]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/20 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center"
        >
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-muted-foreground text-lg">{t.loading}</p>
        </motion.div>
      </div>
    );
  }

  if (error && !certificate) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/20 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center max-w-md mx-auto p-6"
        >
          <div className="w-20 h-20 bg-destructive/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <Award className="w-10 h-10 text-destructive" />
          </div>
          <h1 className="text-2xl font-bold mb-2">{t.notFound}</h1>
          <p className="text-muted-foreground mb-6">{error}</p>
          <div className="flex gap-3 justify-center">
            {onNavigate && (
              <Button onClick={() => onNavigate('lesson-player')} variant="outline">
                {t.backToModules}
              </Button>
            )}
          </div>
        </motion.div>
      </div>
    );
  }

  if (!certificate) return null;

  const completionDate = new Date(certificate.completionDate);

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/20">
      {/* Header */}
      <header className="border-b border-border bg-background/80 backdrop-blur-sm sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              {onNavigate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onNavigate('persona')}
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  {t.backToModules}
                </Button>
              )}
              <div>
                <h1 className="text-lg font-semibold">OVERWATCH³</h1>
                <p className="text-sm text-muted-foreground">{t.certificateOfCompletion}</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {onLanguageChange && (
                <LanguageToggle
                  current={language}
                  onChange={onLanguageChange}
                />
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-6 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-8"
        >
          {/* Certificate Header */}
          <Card className="p-8 text-center bg-gradient-to-br from-card to-secondary/20 border-primary/20">
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ delay: 0.2 }}
              className="space-y-6"
            >
              <div className="w-20 h-20 bg-primary/20 rounded-full flex items-center justify-center mx-auto">
                <Award className="w-10 h-10 text-primary" />
              </div>
              
              <div>
                <h1 className="text-3xl font-bold mb-2">{t.certificateOfCompletion}</h1>
                <p className="text-lg text-muted-foreground">
                  {certificate.moduleCaption[language] || certificate.moduleCaption.en}
                </p>
              </div>

              <div className="bg-background/50 rounded-lg p-6 max-w-2xl mx-auto">
                <div className="flex items-center gap-3 justify-center mb-4">
                  <User className="w-6 h-6 text-primary" />
                  <h2 className="text-2xl font-bold text-primary">{certificate.learnerName}</h2>
                </div>
                <p className="text-foreground mb-2">{t.completedTheModule}</p>
                <div className="flex items-center gap-3 justify-center">
                  <BookOpen className="w-5 h-5 text-muted-foreground" />
                  <h3 className="text-xl font-semibold">{certificate.moduleTitle}</h3>
                </div>
              </div>
            </motion.div>
          </Card>

          {/* Impact Metrics */}
          <Card className="p-6">
            <div className="flex items-center gap-3 mb-6">
              <Target className="w-6 h-6 text-primary" />
              <h3 className="text-xl font-semibold">{t.impactMetrics}</h3>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Metric
                label={t.clarityIndex}
                value={certificate.metrics.clarityIndex}
                icon={<TrendingUp className="w-4 h-4" />}
                color="blue"
              />
              <Metric
                label={t.confidenceLift}
                value={certificate.metrics.confidenceLift}
                icon={<Zap className="w-4 h-4" />}
                color="green"
              />
              <Metric
                label={t.executionSpeed}
                value={certificate.metrics.executionSpeed}
                icon={<Target className="w-4 h-4" />}
                color="purple"
              />
            </div>
          </Card>

          {/* Schema Trace */}
          <Card className="p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-6 h-6 bg-primary/20 rounded flex items-center justify-center">
                <span className="text-primary text-xs font-bold">🧩</span>
              </div>
              <h4 className="text-lg font-semibold">{t.schemaTrace}</h4>
            </div>
            <div className="bg-secondary/50 rounded-lg p-4">
              <code className="text-sm text-foreground font-mono break-all">
                {certificate.schemaTrace}
              </code>
            </div>
          </Card>

          {/* Certificate Details */}
          <Card className="p-6 bg-secondary/20">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <Calendar className="w-5 h-5 text-muted-foreground" />
                  <span className="font-medium">{t.completedOn}:</span>
                  <span>{completionDate.toLocaleDateString(language === 'es' ? 'es-ES' : 'en-US')}</span>
                </div>
                
                <div className="flex items-center gap-3">
                  <Award className="w-5 h-5 text-muted-foreground" />
                  <span className="font-medium">{t.certificateId}:</span>
                  <code className="text-xs bg-background px-2 py-1 rounded border">
                    {certificate.certificateId}
                  </code>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <Badge variant="outline" className="border-green-500 text-green-500">
                    <Check className="w-3 h-3 mr-1" />
                    {t.authenticated}
                  </Badge>
                </div>
                
                <p className="text-sm text-muted-foreground">
                  {t.generatedBy} • {t.poweredBy}
                </p>
              </div>
            </div>
          </Card>

          {/* QR Code Section */}
          <Card className="p-6 bg-gradient-to-r from-secondary/20 to-accent/20">
            <div className="flex flex-col lg:flex-row items-center gap-6">
              <div className="flex-1 text-center lg:text-left">
                <div className="flex items-center gap-3 justify-center lg:justify-start mb-3">
                  <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                    <span className="text-primary text-lg">📱</span>
                  </div>
                  <h4 className="text-lg font-semibold">{t.qrCode}</h4>
                </div>
                <p className="text-muted-foreground mb-4">
                  {language === 'en' 
                    ? 'Scan to view certificate on mobile devices or share with others instantly'
                    : 'Escanea para ver el certificado en dispositivos móviles o compartir instantáneamente'
                  }
                </p>
                <div className="flex gap-3 justify-center lg:justify-start">
                  <EmbedModal
                    certificateId={certificate.certificateId}
                    certificateTitle={certificate.moduleTitle}
                    language={language}
                  >
                    <Button className="flex items-center gap-2 bg-primary hover:bg-primary/90">
                      <Share2 className="w-4 h-4" />
                      {t.shareAndEmbed}
                    </Button>
                  </EmbedModal>
                </div>
              </div>
              
              <div className="flex-shrink-0">
                <QRCodeGenerator
                  value={createCertificateShareUrl(certificate.certificateId)}
                  size={120}
                  language={language}
                  showActions={false}
                  variant="compact"
                />
              </div>
            </div>
          </Card>

          {/* QR Code Showcase (Expandable) */}
          <AnimatePresence>
            {showQRShowcase && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="overflow-hidden"
              >
                <QRCodeGenerator
                  value={createCertificateShareUrl(certificate.certificateId)}
                  title={`${certificate.moduleTitle} - ${t.certificateOfCompletion}`}
                  description={`${certificate.learnerName} • ${t.generatedBy}`}
                  size={200}
                  language={language}
                  variant="showcase"
                  showActions={true}
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center pt-6">
            <ShareButton
              certificateId={certificate.certificateId}
              certificate={certificate}
              language={language}
            />
            <DownloadPDFButton
              certificateData={certificate}
              language={language}
            />
            <Button
              variant="outline"
              onClick={() => setShowQRShowcase(!showQRShowcase)}
              className="flex items-center gap-2"
            >
              <QrCode className="w-4 h-4" />
              {showQRShowcase ? t.hideQR : t.showQR}
            </Button>
            <ReplayModuleButton
              moduleId="demo-module-founder-clarity"
              language={language}
              onNavigate={onNavigate}
            />
          </div>
        </motion.div>
      </main>

      {/* Print Styles */}
      <style jsx global>{`
        @media print {
          .no-print {
            display: none !important;
          }
          
          body {
            print-color-adjust: exact !important;
            -webkit-print-color-adjust: exact !important;
          }
          
          header {
            display: none !important;
          }
          
          main {
            max-width: none !important;
            padding: 0 !important;
            margin: 0 !important;
          }
        }
        
        @page {
          size: A4 portrait;
          margin: 0.5in;
        }
      `}</style>
    </div>
  );
};

export default CertificateViewer;